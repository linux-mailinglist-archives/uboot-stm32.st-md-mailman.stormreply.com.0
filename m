Return-Path: <uboot-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+uboot-stm32@lfdr.de
Delivered-To: lists+uboot-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id EB3D351EF11
	for <lists+uboot-stm32@lfdr.de>; Sun,  8 May 2022 20:23:23 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id A933FC5EC6B;
	Sun,  8 May 2022 18:23:23 +0000 (UTC)
Received: from mail-qk1-f182.google.com (mail-qk1-f182.google.com
 [209.85.222.182])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id A9723C5A4FD
 for <uboot-stm32@st-md-mailman.stormreply.com>;
 Sun,  8 May 2022 18:23:22 +0000 (UTC)
Received: by mail-qk1-f182.google.com with SMTP id k8so4259567qki.8
 for <uboot-stm32@st-md-mailman.stormreply.com>;
 Sun, 08 May 2022 11:23:22 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=subject:to:cc:references:from:message-id:date:user-agent
 :mime-version:in-reply-to:content-language:content-transfer-encoding;
 bh=14gYc98g2G39EHzkrF/ZoJVYLMw8rWOaPEBNPJXRSfo=;
 b=Yzy/9Cwy9G9LVJ/TyfBjgXNJtYi8IpPJwxSId799VxX1dJuXB43QWZtOvHL6NBBafE
 5W8z0vqZ8jgE20V4eBg3KMJQkHb4DgOWq4s8iDpMtdXmVYwZowDse38VkNOXOFs9gfQV
 yY1TKWsOx/HmFtYwOCzOriaGoTy9eBPxJBc/Ne/E8ardms4IGNDSFV9A5WXc+oFanMzQ
 KHx4U+1u7lbccTe1AV1kH0ND02a3/Mz+MdUJvzBVaTsmT5AUuH7K8bwLRIfIuzC0Lc9m
 s6XUcoWXdnMWA2mbX5MXN0FXf+4XXeudzDwZr/YEGq+k0MH5GaEbhFhXitvJfLuzjF5m
 O3bA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:subject:to:cc:references:from:message-id:date
 :user-agent:mime-version:in-reply-to:content-language
 :content-transfer-encoding;
 bh=14gYc98g2G39EHzkrF/ZoJVYLMw8rWOaPEBNPJXRSfo=;
 b=bUBks50aSWxiRADjv+rNcevJkshgPJDENY54Vw4upZZcentw6Ppk3ngufJwEqJRAX0
 rcaUE7I4dKDIGVhLWwaM8Jw9zpKpf31GamOZtc9PacY33nr8Pntpa/0i0d1KhvAeBuxp
 drRMDLKESGNOD+hdy6wbCq6A3SGWPUBR0vrmpWPk+TdYQoIgTQ8hEUepurLy3Wi0dZl8
 4tq5t0gX9WkzsLlKGFpn1pMdPlHCe4M46O6C2HWVgX8gc9M3hUTf6g9fUe3PCrkbKGJB
 Ns+YI7N2l3eWyVL+8ehV1ghDys0o10qjQo1i9gJB/P+Eu3OGQkS5ExxOKhesIAbohpcc
 Z+pw==
X-Gm-Message-State: AOAM533Ehk26we/XqMAQ1fxVy8pCf6WAGDJaxF5QjWG/3/0YnG/rahDf
 FrAlXtVMzpRXFhnvpmY/pFFNP9R5OlU=
X-Google-Smtp-Source: ABdhPJwX6B9JHXUTbOIZzTDyufp4oLptNXEmHFUZ0wyHrPNiFKW+NcnOPIQxw9irZ7A/m8KcjbE/qw==
X-Received: by 2002:a37:bcc2:0:b0:69e:d31e:3eed with SMTP id
 m185-20020a37bcc2000000b0069ed31e3eedmr9307728qkf.623.1652034201448; 
 Sun, 08 May 2022 11:23:21 -0700 (PDT)
Received: from [192.168.1.201] (pool-108-18-248-138.washdc.fios.verizon.net.
 [108.18.248.138]) by smtp.googlemail.com with ESMTPSA id
 j5-20020ac84045000000b002f39b99f6a1sm6897332qtl.59.2022.05.08.11.23.20
 (version=TLS1_3 cipher=TLS_AES_128_GCM_SHA256 bits=128/128);
 Sun, 08 May 2022 11:23:21 -0700 (PDT)
To: Patrick Delaunay <patrick.delaunay@foss.st.com>, u-boot@lists.denx.de
References: <20220426123750.579726-1-patrick.delaunay@foss.st.com>
 <20220426143736.2.I0322692ca3c12c0bcacc7da24804b7dcf3402e58@changeid>
From: Sean Anderson <seanga2@gmail.com>
Message-ID: <9ce9e654-da33-449a-58df-033e1c6479af@gmail.com>
Date: Sun, 8 May 2022 14:23:20 -0400
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101
 Thunderbird/68.12.0
MIME-Version: 1.0
In-Reply-To: <20220426143736.2.I0322692ca3c12c0bcacc7da24804b7dcf3402e58@changeid>
Content-Language: en-US
Cc: uboot-stm32@st-md-mailman.stormreply.com,
 Joe Hershberger <joe.hershberger@ni.com>
Subject: Re: [Uboot-stm32] [PATCH 2/3] phy: stm32-usbphyc: usbphyc is a
 clock provider of ck_usbo_48m clock
X-BeenThere: uboot-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <uboot-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/uboot-stm32>, 
 <mailto:uboot-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/uboot-stm32/>
List-Post: <mailto:uboot-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:uboot-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/uboot-stm32>, 
 <mailto:uboot-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Transfer-Encoding: 7bit
Content-Type: text/plain; charset="us-ascii"; Format="flowed"
Errors-To: uboot-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Uboot-stm32" <uboot-stm32-bounces@st-md-mailman.stormreply.com>

On 4/26/22 8:37 AM, Patrick Delaunay wrote:
> ck_usbo_48m is generated by usbphyc PLL and used by OTG controller
> for Full-Speed use cases with dedicated Full-Speed transceiver.
> 
> ck_usbo_48m is available as soon as the PLL is enabled.
> 
> Signed-off-by: Patrick Delaunay <patrick.delaunay@foss.st.com>
> ---
> 
>   drivers/phy/phy-stm32-usbphyc.c | 79 +++++++++++++++++++++++++++++++++
>   1 file changed, 79 insertions(+)
> 
> diff --git a/drivers/phy/phy-stm32-usbphyc.c b/drivers/phy/phy-stm32-usbphyc.c
> index 16c8799eca..e0b8fcb8f2 100644
> --- a/drivers/phy/phy-stm32-usbphyc.c
> +++ b/drivers/phy/phy-stm32-usbphyc.c
> @@ -7,6 +7,7 @@
>   
>   #include <common.h>
>   #include <clk.h>
> +#include <clk-uclass.h>
>   #include <div64.h>
>   #include <dm.h>
>   #include <fdtdec.h>
> @@ -17,6 +18,7 @@
>   #include <usb.h>
>   #include <asm/io.h>
>   #include <dm/device_compat.h>
> +#include <dm/lists.h>
>   #include <linux/bitops.h>
>   #include <linux/delay.h>
>   #include <power/regulator.h>
> @@ -49,6 +51,9 @@
>   #define PLL_INFF_MIN_RATE	19200000 /* in Hz */
>   #define PLL_INFF_MAX_RATE	38400000 /* in Hz */
>   
> +/* USBPHYC_CLK48 */
> +#define USBPHYC_CLK48_FREQ	48000000 /* in Hz */
> +
>   struct pll_params {
>   	u8 ndiv;
>   	u16 frac;
> @@ -355,6 +360,16 @@ static const struct phy_ops stm32_usbphyc_phy_ops = {
>   	.of_xlate = stm32_usbphyc_of_xlate,
>   };
>   
> +static int stm32_usbphyc_bind(struct udevice *dev)
> +{
> +	int ret;
> +
> +	ret = device_bind_driver_to_node(dev, "stm32-usbphyc-clk", "ck_usbo_48m",
> +					 dev_ofnode(dev), NULL);
> +
> +	return log_ret(ret);
> +}
> +
>   static int stm32_usbphyc_probe(struct udevice *dev)
>   {
>   	struct stm32_usbphyc *usbphyc = dev_get_priv(dev);
> @@ -444,6 +459,70 @@ U_BOOT_DRIVER(stm32_usb_phyc) = {
>   	.id = UCLASS_PHY,
>   	.of_match = stm32_usbphyc_of_match,
>   	.ops = &stm32_usbphyc_phy_ops,
> +	.bind = stm32_usbphyc_bind,
>   	.probe = stm32_usbphyc_probe,
>   	.priv_auto	= sizeof(struct stm32_usbphyc),
>   };
> +
> +struct stm32_usbphyc_clk {
> +	bool enable;
> +};
> +
> +static ulong stm32_usbphyc_clk48_get_rate(struct clk *clk)
> +{
> +	return USBPHYC_CLK48_FREQ;

What is the relationship between this clock and the PLL?

> +}
> +
> +static int stm32_usbphyc_clk48_enable(struct clk *clk)
> +{
> +	struct stm32_usbphyc_clk *usbphyc_clk = dev_get_priv(clk->dev);
> +	struct stm32_usbphyc *usbphyc;
> +	int ret;
> +
> +	if (usbphyc_clk->enable)
> +		return 0;
> +
> +	usbphyc = dev_get_priv(clk->dev->parent);
> +
> +	/* ck_usbo_48m is generated by usbphyc PLL */
> +	ret = stm32_usbphyc_pll_enable(usbphyc);
> +	if (ret)
> +		return ret;
> +
> +	usbphyc_clk->enable = true;
> +
> +	return 0;
> +}
> +
> +static int stm32_usbphyc_clk48_disable(struct clk *clk)
> +{
> +	struct stm32_usbphyc_clk *usbphyc_clk = dev_get_priv(clk->dev);
> +	struct stm32_usbphyc *usbphyc;
> +	int ret;
> +
> +	if (!usbphyc_clk->enable)
> +		return 0;
> +
> +	usbphyc = dev_get_priv(clk->dev->parent);
> +
> +	ret = stm32_usbphyc_pll_disable(usbphyc);
> +	if (ret)
> +		return ret;
> +
> +	usbphyc_clk->enable = false;
> +
> +	return 0;
> +}
> +
> +const struct clk_ops usbphyc_clk48_ops = {
> +	.get_rate = stm32_usbphyc_clk48_get_rate,
> +	.enable = stm32_usbphyc_clk48_enable,
> +	.disable = stm32_usbphyc_clk48_disable,
> +};
> +
> +U_BOOT_DRIVER(stm32_usb_phyc_clk) = {
> +	.name = "stm32-usbphyc-clk",
> +	.id = UCLASS_CLK,
> +	.ops = &usbphyc_clk48_ops,
> +	.priv_auto = sizeof(struct stm32_usbphyc_clk),
> +};
> 

I see that in the next patch you call this device from drivers/clk/clk_stm32mp1.c

Why is this clock a separate driver from the clock driver?

--Sean
_______________________________________________
Uboot-stm32 mailing list
Uboot-stm32@st-md-mailman.stormreply.com
https://st-md-mailman.stormreply.com/mailman/listinfo/uboot-stm32
