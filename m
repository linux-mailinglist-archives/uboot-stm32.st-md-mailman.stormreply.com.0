Return-Path: <uboot-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+uboot-stm32@lfdr.de
Delivered-To: lists+uboot-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id A87C34D05B3
	for <lists+uboot-stm32@lfdr.de>; Mon,  7 Mar 2022 18:51:08 +0100 (CET)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 5818EC5EC6C;
	Mon,  7 Mar 2022 17:51:08 +0000 (UTC)
Received: from mx07-00178001.pphosted.com (mx08-00178001.pphosted.com
 [91.207.212.93])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 1F7D3C5EC56
 for <uboot-stm32@st-md-mailman.stormreply.com>;
 Mon,  7 Mar 2022 17:51:07 +0000 (UTC)
Received: from pps.filterd (m0046661.ppops.net [127.0.0.1])
 by mx07-00178001.pphosted.com (8.16.1.2/8.16.1.2) with ESMTP id 227Bi49c023274;
 Mon, 7 Mar 2022 18:50:39 +0100
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=foss.st.com;
 h=from : to : cc :
 subject : date : message-id : mime-version : content-type :
 content-transfer-encoding; s=selector1;
 bh=YHZy7WhwH8qb016+aVuILW0AQvtM9PfCnrrP7JT/iSY=;
 b=oiBi4lv9rGCmx5PBNvFQL9nLBsna8alxyg+mKPnahwcnpSErm8xcN/75vPwi9gsKB7D1
 2zZcnYVKw6kNSKGQd9pLR8gXXf/w//PH+UPQVxe2XQr6hu7HiQFWRlh+P4wydqQiKdKB
 u6FUSigOip3EFnoZ8HmjWVnLs1JrXf7zbLgDkGjpHQA9/lSB38jCnQTtwBSH2hH52EjJ
 W2i4sCl9KgxvrCHBJZJBAdiKmU6LUEg2SBGCbSVS9xBQMw9xP++ySILa9FGgxW6+JMCk
 A6Szn977C0gDjT8b1+L4FONWKtGwlXfB+MfSFJn0FeaiW38ZDooI0GqFHJhrTeiLjSra qQ== 
Received: from beta.dmz-eu.st.com (beta.dmz-eu.st.com [164.129.1.35])
 by mx07-00178001.pphosted.com (PPS) with ESMTPS id 3ekymm41pp-1
 (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
 Mon, 07 Mar 2022 18:50:39 +0100
Received: from euls16034.sgp.st.com (euls16034.sgp.st.com [10.75.44.20])
 by beta.dmz-eu.st.com (STMicroelectronics) with ESMTP id AE66410002A;
 Mon,  7 Mar 2022 18:50:36 +0100 (CET)
Received: from Webmail-eu.st.com (shfdag1node1.st.com [10.75.129.69])
 by euls16034.sgp.st.com (STMicroelectronics) with ESMTP id 89E8026027D;
 Mon,  7 Mar 2022 18:50:36 +0100 (CET)
Received: from localhost (10.75.127.50) by SHFDAG1NODE1.st.com (10.75.129.69)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256) id 15.1.2308.20; Mon, 7 Mar
 2022 18:50:36 +0100
From: Patrice Chotard <patrice.chotard@foss.st.com>
To: <u-boot@lists.denx.de>
Date: Mon, 7 Mar 2022 18:50:34 +0100
Message-ID: <20220307185028.v3.1.Ia4144ff459c53ba75870c1c488361bced44be7ea@changeid>
X-Mailer: git-send-email 2.17.1
MIME-Version: 1.0
X-Originating-IP: [10.75.127.50]
X-ClientProxiedBy: SFHDAG2NODE1.st.com (10.75.127.4) To SHFDAG1NODE1.st.com
 (10.75.129.69)
X-Proofpoint-Virus-Version: vendor=baseguard
 engine=ICAP:2.0.205,Aquarius:18.0.816,Hydra:6.0.425,FMLib:17.11.64.514
 definitions=2022-03-07_09,2022-03-04_01,2022-02-23_01
Cc: Vignesh R <vigneshr@ti.com>, Masami Hiramatsu <masami.hiramatsu@linaro.org>,
 Sean Anderson <seanga2@gmail.com>, Joe Hershberger <joe.hershberger@ni.com>,
 Chaitanya Sakinam <chaitanya.sakinam@nxp.com>,
 U-Boot STM32 <uboot-stm32@st-md-mailman.stormreply.com>,
 Stefan Roese <sr@denx.de>, Marek Vasut <marex@denx.de>,
 Heinrich Schuchardt <xypron.glpk@gmx.de>, Lukasz Majewski <lukma@denx.de>,
 Marek Behun <marek.behun@nic.cz>, Ramon Fried <rfried.dev@gmail.com>,
 Jagan Teki <jagan@amarulasolutions.com>,
 Konstantin Porotchkin <kostap@marvell.com>, Biwen Li <biwen.li@nxp.com>,
 Wolfgang Denk <wd@denx.de>, Anji J <anji.jagarlmudi@nxp.com>,
 Jassi Brar <jaswinder.singh@linaro.org>, Igal Liberman <igall@marvell.com>,
 Priyanka Jain <priyanka.jain@nxp.com>, Simon Glass <sjg@chromium.org>,
 Patrick DELAUNAY <patrick.delaunay@foss.st.com>, Bin Meng <bmeng.cn@gmail.com>,
 =?UTF-8?q?Pali=20Roh=C3=A1r?= <pali@kernel.org>,
 Pratyush Yadav <p.yadav@ti.com>
Subject: [Uboot-stm32] [PATCH v3] spi: spi_flash_probe_bus_cs() rely on DT
	for spi speed and mode
X-BeenThere: uboot-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <uboot-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/uboot-stm32>, 
 <mailto:uboot-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/uboot-stm32/>
List-Post: <mailto:uboot-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:uboot-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/uboot-stm32>, 
 <mailto:uboot-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: uboot-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Uboot-stm32" <uboot-stm32-bounces@st-md-mailman.stormreply.com>

U2luY2UgY29tbWl0IGUyZTk1ZTVlMjU0MiAoInNwaTogVXBkYXRlIHNwZWVkL21vZGUgb24gY2hh
bmdlIikKd2hlbiBjYWxsaW5nICJzZiBwcm9iZSIgb3IgImVudiBzYXZlIiBvbiBTUEkgZmxhc2gs
CnNwaV9zZXRfc3BlZWRfbW9kZSgpIGlzIGNhbGxlZCB0d2ljZS4KCnNwaV9nZXRfYnVzX2FuZF9j
cygpCiAgICAgIHwtLT4gc3BpX2NsYWltX2J1cygpCiAgICAgIHwgICAgICAgfC0tPiBzcGlfc2V0
X3NwZWVkX21vZGUoc3BlZWQgYW5kIG1vZGUgZnJvbSBEVCkKICAgICAgLi4uCiAgICAgIHwtLT4g
c3BpX3NldF9zcGVlZF9tb2RlKGRlZmF1bHQgc3BlZWQgYW5kIG1vZGUgdmFsdWUpCgpUaGUgZmly
c3Qgc3BpX3NldF9zcGVlZF9tb2RlKCkgY2FsbCBpcyBkb25lIHdpdGggc3BlZWQgYW5kIG1vZGUK
dmFsdWVzIGZyb20gRFQsIHdoZXJlYXMgdGhlIHNlY29uZCBjYWxsIGlzIGRvbmUgd2l0aCBzcGVl
ZAphbmQgbW9kZSBzZXQgdG8gZGVmYXVsdCB2YWx1ZSAoc3BlZWQgaXMgc2V0IHRvIENPTkZJR19T
Rl9ERUZBVUxUX1NQRUVEKQoKVGhpcyBpcyBhbiBpc3N1ZSBiZWNhdXNlIFNQSSBmbGFzaCBwZXJm
b3JtYW5jZSBhcmUgaW1wYWN0ZWQgYnkKdXNpbmcgZGVmYXVsdCBzcGVlZCB3aGljaCBjYW4gYmUg
bG93ZXIgdGhhbiB0aGUgb25lIGRlZmluZWQgaW4gRFQuCgpPbmUgc29sdXRpb24gaXMgdG8gc2V0
IENPTkZJR19TRl9ERUZBVUxUX1NQRUVEIHRvIHRoZSBzcGVlZCBkZWZpbmVkCmluIERULCBidXQg
d2UgbG9vc2UgZmxleGliaWxpdHkgb2ZmZXJlZCBieSBEVC4KCkFub3RoZXIgaXNzdWUgY2FuIGJl
IGVuY291bnRlcmVkIHdpdGggMiBTUEkgZmxhc2hlcyB1c2luZyAyIGRpZmZlcmVudApzcGVlZHMu
IEluIHRoaXMgc3BlY2lmaWMgY2FzZSB1c2FnZSBvZiBDT05GSUdfU0ZfREVGQVVMVF9TUEVFRCBp
cyBub3QKZmxleGlibGUgY29tcGFyZWQgdG8gZ2V0IHRoZSAyIGRpZmZlcmVudCBzcGVlZHMgZnJv
bSBEVC4KClRvIGZpeCB0aGlzIGlzc3VlLCB0aGUgbGVnYWN5IHNwaV9nZXRfYnVzX2FuZF9jcygp
IGlzIHJlbmFtZWQgdG8KX3NwaV9nZXRfYnVzX2FuZF9jcygpIGFuZCBrZWVwIHRoZSBzYW1lIGJl
aGF2aW91ci4KQWRkIGEgbmV3IHNwaV9nZXRfYnVzX2FuZF9jcygpIHdoaWNoIHJlbHkgb24gRFQg
Zm9yIHNwaSBzcGVlZCBhbmQgbW9kZQp2YWx1ZXMuCgpOb3csIHNwaV9mbGFzaF9wcm9iZV9idXNf
Y3MoKSByZWxpZXMgb24gRFQgZm9yIHNwaSBzcGVlZCBhbmQgbW9kZQphbmQgbG9naWNhbGx5IGNh
bGxzIHNwaV9nZXRfYnVzX2FuZF9jcygpLiBJbiBjYXNlIHNwaSBtb2RlIGFuZCBzcGVlZCBhcmUK
bm90IHJlYWQgZnJvbSBEVCwgbWFrZSB1c2FnZSBvZiBzcGlfZmxhc2hfcHJvYmUoKS4KVGhpcyBw
YXRjaCBpbXBhY3RzIHRoZSBmb2xsb3dpbmcgOgogIC0gY21kL3NmLmM6IGlmIHNwaSBtb2RlIGFu
ZC9vciBzcGVlZCBpcyBwYXNzZWQgaW4gYXJndW1lbnQsIGNhbGwKICAgIHNwaV9mbGFzaF9wcm9i
ZSgpIG90aGVyd2lzZSBjYWxsIHNwaV9mbGFzaF9wcm9iZV9idXNfY3MoKS4KCiAgXyBjbWQvc3Bp
LmM6IGtlZXAgbGVnYWN5LCByZXBsYWNlIHNwaV9nZXRfYnVzX2FuZF9jcygpIGJ5CiAgICBfc3Bp
X2dldF9idXNfYW5kX2NzKCkKCiAgXyBkcml2ZXJzL25ldC9mbS9mbS5jOiBubyBpbXBhY3QgYXMg
YnkgZGVmYXVsdCBzcGkgc3BlZWQgYW5kIG1vZGUKICAgIHdhcyBzZXQgdG8gMCBhbmQgYSBjb21t
ZW50IGluZGljYXRlcyB0aGF0IHNwZWVkIGFuZCBtb2RlIGFyZSByZWFkCiAgICBmcm9tIERULgoK
ICBfIGRyaXZlcnMvbmV0L3BmZV9ldGgvcGZlX2Zpcm13YXJlLmM6IHNwaSBzcGVlZCBhbmQgbW9k
ZSBhcmUgbm90IHJlYWQKICAgIGZyb20gRFQgYnkgYWxsIHBsYXRmb3JtcyB1c2luZyB0aGlzIGRy
aXZlciwgc28ga2VlcCBsZWdhY3kgYW5kIHJlcGxhY2UKICAgIHNwaV9mbGFzaF9wcm9iZV9idXNf
Y3MoKSBieSBzcGlfZmxhc2hfcHJvYmUoKTsKCiAgXyBkcml2ZXJzL3VzYi9nYWRnZXQvbWF4MzQy
MF91ZGMuYzogc3BpIHNwZWVkIGFuZCBtb2RlIGFyZSBub3QgcmVhZAogICAgZnJvbSBEVCwga2Vl
cCBsZWdhY3ksIHJlcGxhY2Ugc3BpX2dldF9idXNfYW5kX2NzKCkgYnkKICAgIF9zcGlfZ2V0X2J1
c19hbmRfY3MoKQoKICBfIGRyaXZlcnMvbmV0L3NuaV9uZXRzZWMuYyA6IHNwaSBzcGVlZCBhbmQg
bW9kZSBhcmUgbm90IHJlYWQgZnJvbSBEVCwKICAgIHNvIHJlcGxhY2Ugc3BpX2ZsYXNoX3Byb2Jl
X2J1c19jcygpIGJ5IHNwaV9mbGFzaF9wcm9iZSgpLgoKICBfIGRyaXZlcnMvdXNiL2dhZGdldC9t
YXgzNDIwX3VkYy5jOiBDYW4ndCBmaW5kIGFueSBwbGF0Zm9ybSB3aGljaCBtYWtlCiAgICB1c2Fn
ZSBvZiB0aGlzIGRyaXZlciwgbmV2ZXJ0aGVsZXNzLCBrZWVwIGxlZ2FjeSBhbmQgcmVwbGFjZQog
ICAgc3BpX2dldF9idXNfYW5kX2NzKCkgYnkgX3NwaV9nZXRfYnVzX2FuZF9jcygpLgoKICBfIGVu
di9zZi5jOiBubyBpbXBhY3QsIGFzIGJ5IGRlZmF1bHQgc3BpIHNwZWVkIGFuZCBtb2RlCiAgICB3
YXMgc2V0IHRvIDAgYW5kIGEgY29tbWVudCBpbmRpY2F0ZXMgdGhhdCBzcGVlZCBhbmQgbW9kZSBh
cmUgcmVhZAogICAgZnJvbSBEVC4KCiAgLSB1cGRhdGUgdGVzdC9kbS9zcGkuYzogd2hlbiBzcGlf
Z2V0X2J1c19hbmRfY3MoKSB3YXMgdXNlZCB3aWh0b3V0CiAgICBkcml2ZXIgYW5kIGRldmljZSBu
YW1lLCBubyBjaGFuZ2UuCiAgICBXaGVuIHNwaV9nZXRfYnVzX2FuZF9jcygpIHdhcyB1c2VkIHdp
dGggZHJpdmVyIGFuZCBkZXZpY2UgbmFtZSwKICAgIHVzZSB0aGUgbGVnYWN5IGJ5IGNhbGxpbmcg
X3NwaV9nZXRfYnVzX2FuZF9jcygpLgoKQ2M6IE1hcmVrIEJlaHVuIDxtYXJlay5iZWh1bkBuaWMu
Y3o+CkNjOiBKYWdhbiBUZWtpIDxqYWdhbkBhbWFydWxhc29sdXRpb25zLmNvbT4KQ2M6IFZpZ25l
c2ggUiA8dmlnbmVzaHJAdGkuY29tPgpDYzogSm9lIEhlcnNoYmVyZ2VyIDxqb2UuaGVyc2hiZXJn
ZXJAbmkuY29tPgpDYzogUmFtb24gRnJpZWQgPHJmcmllZC5kZXZAZ21haWwuY29tPgpDYzogTHVr
YXN6IE1hamV3c2tpIDxsdWttYUBkZW54LmRlPgpDYzogTWFyZWsgVmFzdXQgPG1hcmV4QGRlbngu
ZGU+CkNjOiBXb2xmZ2FuZyBEZW5rIDx3ZEBkZW54LmRlPgpDYzogU2ltb24gR2xhc3MgPHNqZ0Bj
aHJvbWl1bS5vcmc+CkNjOiBTdGVmYW4gUm9lc2UgPHNyQGRlbnguZGU+CkNjOiAiUGFsaSBSb2jD
oXIiIDxwYWxpQGtlcm5lbC5vcmc+CkNjOiBLb25zdGFudGluIFBvcm90Y2hraW4gPGtvc3RhcEBt
YXJ2ZWxsLmNvbT4KQ2M6IElnYWwgTGliZXJtYW4gPGlnYWxsQG1hcnZlbGwuY29tPgpDYzogQmlu
IE1lbmcgPGJtZW5nLmNuQGdtYWlsLmNvbT4KQ2M6IFByYXR5dXNoIFlhZGF2IDxwLnlhZGF2QHRp
LmNvbT4KQ2M6IFNlYW4gQW5kZXJzb24gPHNlYW5nYTJAZ21haWwuY29tPgpDYzogQW5qaSBKIDxh
bmppLmphZ2FybG11ZGlAbnhwLmNvbT4KQ2M6IEJpd2VuIExpIDxiaXdlbi5saUBueHAuY29tPgpD
YzogUHJpeWFua2EgSmFpbiA8cHJpeWFua2EuamFpbkBueHAuY29tPgpDYzogQ2hhaXRhbnlhIFNh
a2luYW0gPGNoYWl0YW55YS5zYWtpbmFtQG54cC5jb20+CgpTaWduZWQtb2ZmLWJ5OiBQYXRyaWNl
IENob3RhcmQgPHBhdHJpY2UuY2hvdGFyZEBmb3NzLnN0LmNvbT4KLS0tCgpDaGFuZ2VzIGluIHYz
OgogIC0gVXBkYXRlIGNvbW1pdCBoZWFkZXIgdG8gcmVmbGVjdCB3aGF0IHRoZSBwYXRjaCByZWFs
bHkgZG8uCiAgLSBSZW5hbWUgbGVnYWN5IHNwaV9nZXRfYnVzX2FuZF9jcygpIHRvIF9zcGlfZ2V0
X2J1c19hbmRfY3MoKS4KICAtIE5ldyBzcGlfZ2V0X2J1c19hbmRfY3MoKSByZWx5IG9uIERUIGZv
ciBzcGkgc3BlZWQgYW5kIG1vZGUgdmFsdWVzLgogIC0gc3BpX2ZsYXNoX3Byb2JlX2J1c19jcygp
IHJlbHkgYWxzbyBvbiBEVCBmb3Igc3BpIGFuZCBtb2RlIHZhbHVlcy4KCkNoYW5nZXMgaW4gdjI6
CiAgLSBhZGQgc3BpX2ZsYXNoX3Byb2JlX2J1c19jc19kZWZhdWx0KCkgd2hpY2ggY2FsbHMgc3Bp
X2dldF9idXNfYW5kX2NzKCkKICAgIHdpdGggInVzZV9kdCIgcGFyYW0gc2V0IHRvIHRydWUsIHdo
ZXJlYXMgc3BpX2ZsYXNoX3Byb2JlX2J1c19jcygpIGNhbGxzCiAgICBzcGlfZ2V0X2J1c19hbmRf
Y3MoKSB3aXRoICJ1c2VfZHQiIHBhcmFtIHNldCB0byB0cnVlLgoKIGJvYXJkL0NaLk5JQy90dXJy
aXNfbW94L3R1cnJpc19tb3guYyB8ICA1ICstLQogY21kL3NmLmMgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIHwgMTUgKysrKystLQogY21kL3NwaS5jICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIHwgIDQgKy0KIGRyaXZlcnMvbXRkL3NwaS9zZi11Y2xhc3MuYyAgICAgICAgICB8IDM0ICsr
KysrKysrLS0tLS0tLQogZHJpdmVycy9uZXQvZm0vZm0uYyAgICAgICAgICAgICAgICAgIHwgIDQg
Ky0KIGRyaXZlcnMvbmV0L3BmZV9ldGgvcGZlX2Zpcm13YXJlLmMgICB8IDE1ICstLS0tLS0KIGRy
aXZlcnMvbmV0L3NuaV9uZXRzZWMuYyAgICAgICAgICAgICB8ICA2ICstLQogZHJpdmVycy9zcGkv
c3BpLXVjbGFzcy5jICAgICAgICAgICAgIHwgNjUgKysrKysrKysrKysrKysrKysrKysrKysrKy0t
LQogZHJpdmVycy91c2IvZ2FkZ2V0L21heDM0MjBfdWRjLmMgICAgIHwgIDQgKy0KIGVudi9zZi5j
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAxIC0KIGluY2x1ZGUvc3BpLmggICAgICAg
ICAgICAgICAgICAgICAgICB8IDE5ICsrKysrKystCiBpbmNsdWRlL3NwaV9mbGFzaC5oICAgICAg
ICAgICAgICAgICAgfCAgMSAtCiB0ZXN0L2RtL3NwaS5jICAgICAgICAgICAgICAgICAgICAgICAg
fCAzMiArKysrKysrLS0tLS0tLQogMTMgZmlsZXMgY2hhbmdlZCwgMTM0IGluc2VydGlvbnMoKyks
IDcxIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2JvYXJkL0NaLk5JQy90dXJyaXNfbW94L3R1
cnJpc19tb3guYyBiL2JvYXJkL0NaLk5JQy90dXJyaXNfbW94L3R1cnJpc19tb3guYwppbmRleCA4
ODg4YTJkY2FiLi44ZmVjMTYyMmNkIDEwMDY0NAotLS0gYS9ib2FyZC9DWi5OSUMvdHVycmlzX21v
eC90dXJyaXNfbW94LmMKKysrIGIvYm9hcmQvQ1ouTklDL3R1cnJpc19tb3gvdHVycmlzX21veC5j
CkBAIC0xNDgsOSArMTQ4LDggQEAgc3RhdGljIGludCBtb3hfZG9fc3BpKHU4ICppbiwgdTggKm91
dCwgc2l6ZV90IHNpemUpCiAJc3RydWN0IHVkZXZpY2UgKmRldjsKIAlpbnQgcmV0OwogCi0JcmV0
ID0gc3BpX2dldF9idXNfYW5kX2NzKDAsIDEsIDEwMDAwMDAsIFNQSV9DUEhBIHwgU1BJX0NQT0ws
Ci0JCQkJICJzcGlfZ2VuZXJpY19kcnYiLCAibW94dGV0QDEiLCAmZGV2LAotCQkJCSAmc2xhdmUp
OworCXJldCA9IF9zcGlfZ2V0X2J1c19hbmRfY3MoMCwgMSwgMTAwMDAwMCwgU1BJX0NQSEEgfCBT
UElfQ1BPTCwKKwkJCQkgICJzcGlfZ2VuZXJpY19kcnYiLCAibW94dGV0QDEiLCAmZGV2LCAmc2xh
dmUpOwogCWlmIChyZXQpCiAJCWdvdG8gZmFpbDsKIApkaWZmIC0tZ2l0IGEvY21kL3NmLmMgYi9j
bWQvc2YuYwppbmRleCA4YmRlYmQ5ZmQ4Li44NzEzNzM2YjJhIDEwMDY0NAotLS0gYS9jbWQvc2Yu
YworKysgYi9jbWQvc2YuYwpAQCAtOTEsNiArOTEsNyBAQCBzdGF0aWMgaW50IGRvX3NwaV9mbGFz
aF9wcm9iZShpbnQgYXJnYywgY2hhciAqY29uc3QgYXJndltdKQogCXVuc2lnbmVkIGludCBzcGVl
ZCA9IENPTkZJR19TRl9ERUZBVUxUX1NQRUVEOwogCXVuc2lnbmVkIGludCBtb2RlID0gQ09ORklH
X1NGX0RFRkFVTFRfTU9ERTsKIAljaGFyICplbmRwOworCWJvb2wgdXNlX2R0ID0gdHJ1ZTsKICNp
ZiBDT05GSUdfSVNfRU5BQkxFRChETV9TUElfRkxBU0gpCiAJc3RydWN0IHVkZXZpY2UgKm5ldywg
KmJ1c19kZXY7CiAJaW50IHJldDsKQEAgLTExNywxMSArMTE4LDEzIEBAIHN0YXRpYyBpbnQgZG9f
c3BpX2ZsYXNoX3Byb2JlKGludCBhcmdjLCBjaGFyICpjb25zdCBhcmd2W10pCiAJCXNwZWVkID0g
c2ltcGxlX3N0cnRvdWwoYXJndlsyXSwgJmVuZHAsIDApOwogCQlpZiAoKmFyZ3ZbMl0gPT0gMCB8
fCAqZW5kcCAhPSAwKQogCQkJcmV0dXJuIC0xOworCQl1c2VfZHQgPSBmYWxzZTsKIAl9CiAJaWYg
KGFyZ2MgPj0gNCkgewogCQltb2RlID0gaGV4dG91bChhcmd2WzNdLCAmZW5kcCk7CiAJCWlmICgq
YXJndlszXSA9PSAwIHx8ICplbmRwICE9IDApCiAJCQlyZXR1cm4gLTE7CisJCXVzZV9kdCA9IGZh
bHNlOwogCX0KIAogI2lmIENPTkZJR19JU19FTkFCTEVEKERNX1NQSV9GTEFTSCkKQEAgLTEzMSwx
NCArMTM0LDE4IEBAIHN0YXRpYyBpbnQgZG9fc3BpX2ZsYXNoX3Byb2JlKGludCBhcmdjLCBjaGFy
ICpjb25zdCBhcmd2W10pCiAJCWRldmljZV9yZW1vdmUobmV3LCBETV9SRU1PVkVfTk9STUFMKTsK
IAl9CiAJZmxhc2ggPSBOVUxMOwotCXJldCA9IHNwaV9mbGFzaF9wcm9iZV9idXNfY3MoYnVzLCBj
cywgc3BlZWQsIG1vZGUsICZuZXcpOwotCWlmIChyZXQpIHsKKwlpZiAodXNlX2R0KSB7CisJCXNw
aV9mbGFzaF9wcm9iZV9idXNfY3MoYnVzLCBjcywgJm5ldyk7CisJCWZsYXNoID0gZGV2X2dldF91
Y2xhc3NfcHJpdihuZXcpOworCX0gZWxzZSB7CisJCWZsYXNoID0gc3BpX2ZsYXNoX3Byb2JlKGJ1
cywgY3MsIHNwZWVkLCBtb2RlKTsKKwl9CisKKwlpZiAoIWZsYXNoKSB7CiAJCXByaW50ZigiRmFp
bGVkIHRvIGluaXRpYWxpemUgU1BJIGZsYXNoIGF0ICV1OiV1IChlcnJvciAlZClcbiIsCiAJCSAg
ICAgICBidXMsIGNzLCByZXQpOwogCQlyZXR1cm4gMTsKIAl9Ci0KLQlmbGFzaCA9IGRldl9nZXRf
dWNsYXNzX3ByaXYobmV3KTsKICNlbHNlCiAJaWYgKGZsYXNoKQogCQlzcGlfZmxhc2hfZnJlZShm
bGFzaCk7CmRpZmYgLS1naXQgYS9jbWQvc3BpLmMgYi9jbWQvc3BpLmMKaW5kZXggNmRjMzI2Nzhk
YS4uNDU0ZWJlMzdkNyAxMDA2NDQKLS0tIGEvY21kL3NwaS5jCisrKyBiL2NtZC9zcGkuYwpAQCAt
NDYsOCArNDYsOCBAQCBzdGF0aWMgaW50IGRvX3NwaV94ZmVyKGludCBidXMsIGludCBjcykKIAlz
dHIgPSBzdHJkdXAobmFtZSk7CiAJaWYgKCFzdHIpCiAJCXJldHVybiAtRU5PTUVNOwotCXJldCA9
IHNwaV9nZXRfYnVzX2FuZF9jcyhidXMsIGNzLCBmcmVxLCBtb2RlLCAic3BpX2dlbmVyaWNfZHJ2
IiwKLQkJCQkgc3RyLCAmZGV2LCAmc2xhdmUpOworCXJldCA9IF9zcGlfZ2V0X2J1c19hbmRfY3Mo
YnVzLCBjcywgZnJlcSwgbW9kZSwgInNwaV9nZW5lcmljX2RydiIsCisJCQkJICBzdHIsICZkZXYs
ICZzbGF2ZSk7CiAJaWYgKHJldCkKIAkJcmV0dXJuIHJldDsKICNlbHNlCmRpZmYgLS1naXQgYS9k
cml2ZXJzL210ZC9zcGkvc2YtdWNsYXNzLmMgYi9kcml2ZXJzL210ZC9zcGkvc2YtdWNsYXNzLmMK
aW5kZXggNjNkMTYyOTFmZi4uNGYxODYwMTFlMCAxMDA2NDQKLS0tIGEvZHJpdmVycy9tdGQvc3Bp
L3NmLXVjbGFzcy5jCisrKyBiL2RyaXZlcnMvbXRkL3NwaS9zZi11Y2xhc3MuYwpAQCAtNDYsMjUg
KzQ2LDEyIEBAIGludCBzcGxfZmxhc2hfZ2V0X3N3X3dyaXRlX3Byb3Qoc3RydWN0IHVkZXZpY2Ug
KmRldikKICAqIFRPRE8oc2pnQGNocm9taXVtLm9yZyk6IFRoaXMgaXMgYW4gb2xkLXN0eWxlIGZ1
bmN0aW9uLiBXZSBzaG91bGQgcmVtb3ZlCiAgKiBpdCB3aGVuIGFsbCBTUEkgZmxhc2ggZHJpdmVy
cyB1c2UgZG0KICAqLwotc3RydWN0IHNwaV9mbGFzaCAqc3BpX2ZsYXNoX3Byb2JlKHVuc2lnbmVk
IGludCBidXMsIHVuc2lnbmVkIGludCBjcywKK3N0cnVjdCBzcGlfZmxhc2ggKnNwaV9mbGFzaF9w
cm9iZSh1bnNpZ25lZCBpbnQgYnVzbnVtLCB1bnNpZ25lZCBpbnQgY3MsCiAJCQkJICB1bnNpZ25l
ZCBpbnQgbWF4X2h6LCB1bnNpZ25lZCBpbnQgc3BpX21vZGUpCi17Ci0Jc3RydWN0IHVkZXZpY2Ug
KmRldjsKLQotCWlmIChzcGlfZmxhc2hfcHJvYmVfYnVzX2NzKGJ1cywgY3MsIG1heF9oeiwgc3Bp
X21vZGUsICZkZXYpKQotCQlyZXR1cm4gTlVMTDsKLQotCXJldHVybiBkZXZfZ2V0X3VjbGFzc19w
cml2KGRldik7Ci19Ci0KLWludCBzcGlfZmxhc2hfcHJvYmVfYnVzX2NzKHVuc2lnbmVkIGludCBi
dXNudW0sIHVuc2lnbmVkIGludCBjcywKLQkJCSAgIHVuc2lnbmVkIGludCBtYXhfaHosIHVuc2ln
bmVkIGludCBzcGlfbW9kZSwKLQkJCSAgIHN0cnVjdCB1ZGV2aWNlICoqZGV2cCkKIHsKIAlzdHJ1
Y3Qgc3BpX3NsYXZlICpzbGF2ZTsKIAlzdHJ1Y3QgdWRldmljZSAqYnVzOwogCWNoYXIgKnN0cjsK
LQlpbnQgcmV0OwogCiAjaWYgZGVmaW5lZChDT05GSUdfU1BMX0JVSUxEKSAmJiBDT05GSUdfSVNf
RU5BQkxFRChVU0VfVElOWV9QUklOVEYpCiAJc3RyID0gInNwaV9mbGFzaCI7CkBAIC03NCwxMiAr
NjEsMjcgQEAgaW50IHNwaV9mbGFzaF9wcm9iZV9idXNfY3ModW5zaWduZWQgaW50IGJ1c251bSwg
dW5zaWduZWQgaW50IGNzLAogCXNucHJpbnRmKG5hbWUsIHNpemVvZihuYW1lKSwgInNwaV9mbGFz
aEAlZDolZCIsIGJ1c251bSwgY3MpOwogCXN0ciA9IHN0cmR1cChuYW1lKTsKICNlbmRpZgotCXJl
dCA9IHNwaV9nZXRfYnVzX2FuZF9jcyhidXNudW0sIGNzLCBtYXhfaHosIHNwaV9tb2RlLAotCQkJ
CSAgImplZGVjX3NwaV9ub3IiLCBzdHIsICZidXMsICZzbGF2ZSk7CisKKwlpZiAoX3NwaV9nZXRf
YnVzX2FuZF9jcyhidXNudW0sIGNzLCBtYXhfaHosIHNwaV9tb2RlLAorCQkJCSJqZWRlY19zcGlf
bm9yIiwgc3RyLCAmYnVzLCAmc2xhdmUpKQorCQlyZXR1cm4gTlVMTDsKKworCXJldHVybiBkZXZf
Z2V0X3VjbGFzc19wcml2KHNsYXZlLT5kZXYpOworfQorCitpbnQgc3BpX2ZsYXNoX3Byb2JlX2J1
c19jcyh1bnNpZ25lZCBpbnQgYnVzbnVtLCB1bnNpZ25lZCBpbnQgY3MsCisJCQkgICBzdHJ1Y3Qg
dWRldmljZSAqKmRldnApCit7CisJc3RydWN0IHNwaV9zbGF2ZSAqc2xhdmU7CisJc3RydWN0IHVk
ZXZpY2UgKmJ1czsKKwlpbnQgcmV0OworCisJcmV0ID0gc3BpX2dldF9idXNfYW5kX2NzKGJ1c251
bSwgY3MsICZidXMsICZzbGF2ZSk7CiAJaWYgKHJldCkKIAkJcmV0dXJuIHJldDsKIAogCSpkZXZw
ID0gc2xhdmUtPmRldjsKKwogCXJldHVybiAwOwogfQogCmRpZmYgLS1naXQgYS9kcml2ZXJzL25l
dC9mbS9mbS5jIGIvZHJpdmVycy9uZXQvZm0vZm0uYwppbmRleCBmODI1NjEyNjQwLi5kMGI0OTJi
NWExIDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC9mbS9mbS5jCisrKyBiL2RyaXZlcnMvbmV0L2Zt
L2ZtLmMKQEAgLTM4OCw3ICszODgsNyBAQCBpbnQgZm1faW5pdF9jb21tb24oaW50IGluZGV4LCBz
dHJ1Y3QgY2Nzcl9mbWFuICpyZWcpCiAKIAkJLyogc3BlZWQgYW5kIG1vZGUgd2lsbCBiZSByZWFk
IGZyb20gRFQgKi8KIAkJcmV0ID0gc3BpX2ZsYXNoX3Byb2JlX2J1c19jcyhDT05GSUdfU0ZfREVG
QVVMVF9CVVMsCi0JCQkJCSAgICAgQ09ORklHX1NGX0RFRkFVTFRfQ1MsIDAsIDAsICZuZXcpOwor
CQkJCQkgICAgIENPTkZJR19TRl9ERUZBVUxUX0NTLCAmbmV3KTsKIAogCQl1Y29kZV9mbGFzaCA9
IGRldl9nZXRfdWNsYXNzX3ByaXYobmV3KTsKICNlbHNlCkBAIC00NzUsNyArNDc1LDcgQEAgaW50
IGZtX2luaXRfY29tbW9uKGludCBpbmRleCwgc3RydWN0IGNjc3JfZm1hbiAqcmVnKQogCiAJLyog
c3BlZWQgYW5kIG1vZGUgd2lsbCBiZSByZWFkIGZyb20gRFQgKi8KIAlyZXQgPSBzcGlfZmxhc2hf
cHJvYmVfYnVzX2NzKENPTkZJR19TRl9ERUZBVUxUX0JVUywgQ09ORklHX1NGX0RFRkFVTFRfQ1Ms
Ci0JCQkJICAgICAwLCAwLCAmbmV3KTsKKwkJCQkgICAgICZuZXcpOwogCiAJdWNvZGVfZmxhc2gg
PSBkZXZfZ2V0X3VjbGFzc19wcml2KG5ldyk7CiAjZWxzZQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9u
ZXQvcGZlX2V0aC9wZmVfZmlybXdhcmUuYyBiL2RyaXZlcnMvbmV0L3BmZV9ldGgvcGZlX2Zpcm13
YXJlLmMKaW5kZXggNjY2OTA0ODE4MS4uNTIxNDJlMTk3NiAxMDA2NDQKLS0tIGEvZHJpdmVycy9u
ZXQvcGZlX2V0aC9wZmVfZmlybXdhcmUuYworKysgYi9kcml2ZXJzL25ldC9wZmVfZXRoL3BmZV9m
aXJtd2FyZS5jCkBAIC0xNzIsMzEgKzE3MiwyMCBAQCBzdGF0aWMgaW50IHBmZV9maXRfY2hlY2so
dm9pZCkKIGludCBwZmVfc3BpX2ZsYXNoX2luaXQodm9pZCkKIHsKIAlzdHJ1Y3Qgc3BpX2ZsYXNo
ICpwZmVfZmxhc2g7Ci0Jc3RydWN0IHVkZXZpY2UgKm5ldzsKIAlpbnQgcmV0ID0gMDsKIAl2b2lk
ICphZGRyID0gbWFsbG9jKENPTkZJR19TWVNfTFNfUEZFX0ZXX0xFTkdUSCk7CiAKIAlpZiAoIWFk
ZHIpCiAJCXJldHVybiAtRU5PTUVNOwogCi0JcmV0ID0gc3BpX2ZsYXNoX3Byb2JlX2J1c19jcyhD
T05GSUdfU1lTX0ZTTF9QRkVfU1BJX0JVUywKKwlwZmVfZmxhc2ggPSBzcGlfZmxhc2hfcHJvYmUo
Q09ORklHX1NZU19GU0xfUEZFX1NQSV9CVVMsCiAJCQkJICAgICBDT05GSUdfU1lTX0ZTTF9QRkVf
U1BJX0NTLAogCQkJCSAgICAgQ09ORklHX1NZU19GU0xfUEZFX1NQSV9NQVhfSFosCi0JCQkJICAg
ICBDT05GSUdfU1lTX0ZTTF9QRkVfU1BJX01PREUsCi0JCQkJICAgICAmbmV3KTsKLQlpZiAocmV0
KSB7Ci0JCXByaW50ZigiU0Y6IGZhaWxlZCB0byBwcm9iZSBzcGlcbiIpOwotCQlmcmVlKGFkZHIp
OwotCQlkZXZpY2VfcmVtb3ZlKG5ldywgRE1fUkVNT1ZFX05PUk1BTCk7Ci0JCXJldHVybiByZXQ7
Ci0JfQotCisJCQkJICAgICBDT05GSUdfU1lTX0ZTTF9QRkVfU1BJX01PREUpOwogCi0JcGZlX2Zs
YXNoID0gZGV2X2dldF91Y2xhc3NfcHJpdihuZXcpOwogCWlmICghcGZlX2ZsYXNoKSB7CiAJCXBy
aW50ZigiU0Y6IHByb2JlIGZvciBwZmUgZmFpbGVkXG4iKTsKIAkJZnJlZShhZGRyKTsKLQkJZGV2
aWNlX3JlbW92ZShuZXcsIERNX1JFTU9WRV9OT1JNQUwpOwogCQlyZXR1cm4gLUVOT0RFVjsKIAl9
CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvbmV0L3NuaV9uZXRzZWMuYyBiL2RyaXZlcnMvbmV0L3Nu
aV9uZXRzZWMuYwppbmRleCA0OTAxMzIxZDBjLi5jMTMyZTliYjMyIDEwMDY0NAotLS0gYS9kcml2
ZXJzL25ldC9zbmlfbmV0c2VjLmMKKysrIGIvZHJpdmVycy9uZXQvc25pX25ldHNlYy5jCkBAIC02
MjEsMTIgKzYyMSwxMCBAQCBzdGF0aWMgaW50IG5ldHNlY19zdG9wX2dtYWMoc3RydWN0IG5ldHNl
Y19wcml2ICpwcml2KQogCiBzdGF0aWMgdm9pZCBuZXRzZWNfc3BpX3JlYWQoY2hhciAqYnVmLCBs
b2ZmX3QgbGVuLCBsb2ZmX3Qgb2Zmc2V0KQogewotCXN0cnVjdCB1ZGV2aWNlICpuZXc7CiAJc3Ry
dWN0IHNwaV9mbGFzaCAqZmxhc2g7CiAKLQlzcGlfZmxhc2hfcHJvYmVfYnVzX2NzKENPTkZJR19T
Rl9ERUZBVUxUX0JVUywgQ09ORklHX1NGX0RFRkFVTFRfQ1MsCi0JCQkgICAgICAgQ09ORklHX1NG
X0RFRkFVTFRfU1BFRUQsIENPTkZJR19TRl9ERUZBVUxUX01PREUsICZuZXcpOwotCWZsYXNoID0g
ZGV2X2dldF91Y2xhc3NfcHJpdihuZXcpOworCWZsYXNoID0gc3BpX2ZsYXNoX3Byb2JlKENPTkZJ
R19TRl9ERUZBVUxUX0JVUywgQ09ORklHX1NGX0RFRkFVTFRfQ1MsCisJCQkJQ09ORklHX1NGX0RF
RkFVTFRfU1BFRUQsIENPTkZJR19TRl9ERUZBVUxUX01PREUpOwogCiAJc3BpX2ZsYXNoX3JlYWQo
Zmxhc2gsIG9mZnNldCwgbGVuLCBidWYpOwogfQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9zcGkvc3Bp
LXVjbGFzcy5jIGIvZHJpdmVycy9zcGkvc3BpLXVjbGFzcy5jCmluZGV4IGY4ZWMzMTJkNzEuLmI2
Y2RhNmVmOTkgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvc3BpL3NwaS11Y2xhc3MuYworKysgYi9kcml2
ZXJzL3NwaS9zcGktdWNsYXNzLmMKQEAgLTM0MCw5ICszNDAsNjUgQEAgaW50IHNwaV9maW5kX2J1
c19hbmRfY3MoaW50IGJ1c251bSwgaW50IGNzLCBzdHJ1Y3QgdWRldmljZSAqKmJ1c3AsCiAJcmV0
dXJuIHJldDsKIH0KIAotaW50IHNwaV9nZXRfYnVzX2FuZF9jcyhpbnQgYnVzbnVtLCBpbnQgY3Ms
IGludCBzcGVlZCwgaW50IG1vZGUsCi0JCSAgICAgICBjb25zdCBjaGFyICpkcnZfbmFtZSwgY29u
c3QgY2hhciAqZGV2X25hbWUsCi0JCSAgICAgICBzdHJ1Y3QgdWRldmljZSAqKmJ1c3AsIHN0cnVj
dCBzcGlfc2xhdmUgKipkZXZwKQoraW50IHNwaV9nZXRfYnVzX2FuZF9jcyhpbnQgYnVzbnVtLCBp
bnQgY3MsIHN0cnVjdCB1ZGV2aWNlICoqYnVzcCwKKwkJICAgICAgIHN0cnVjdCBzcGlfc2xhdmUg
KipkZXZwKQoreworCXN0cnVjdCB1ZGV2aWNlICpidXMsICpkZXY7CisJc3RydWN0IGRtX3NwaV9i
dXMgKmJ1c19kYXRhOworCXN0cnVjdCBzcGlfc2xhdmUgKnNsYXZlOworCWludCByZXQ7CisKKyNp
ZiBDT05GSUdfSVNfRU5BQkxFRChPRl9QTEFUREFUQSkKKwlyZXQgPSB1Y2xhc3NfZmlyc3RfZGV2
aWNlX2VycihVQ0xBU1NfU1BJLCAmYnVzKTsKKyNlbHNlCisJcmV0ID0gdWNsYXNzX2dldF9kZXZp
Y2VfYnlfc2VxKFVDTEFTU19TUEksIGJ1c251bSwgJmJ1cyk7CisjZW5kaWYKKwlpZiAocmV0KSB7
CisJCWxvZ19lcnIoIkludmFsaWQgYnVzICVkIChlcnI9JWQpXG4iLCBidXNudW0sIHJldCk7CisJ
CXJldHVybiByZXQ7CisJfQorCXJldCA9IHNwaV9maW5kX2NoaXBfc2VsZWN0KGJ1cywgY3MsICZk
ZXYpOworCWlmIChyZXQpIHsKKwkJZGV2X2VycihidXMsICJJbnZhbGlkIGNoaXAgc2VsZWN0ICVk
OiVkIChlcnI9JWQpXG4iLCBidXNudW0sIGNzLCByZXQpOworCQlyZXR1cm4gcmV0OworCX0KKwor
CWlmICghZGV2aWNlX2FjdGl2ZShkZXYpKSB7CisJCXN0cnVjdCBzcGlfc2xhdmUgKnNsYXZlOwor
CisJCXJldCA9IGRldmljZV9wcm9iZShkZXYpOworCQlpZiAocmV0KQorCQkJZ290byBlcnI7CisJ
CXNsYXZlID0gZGV2X2dldF9wYXJlbnRfcHJpdihkZXYpOworCQlzbGF2ZS0+ZGV2ID0gZGV2Owor
CX0KKworCXNsYXZlID0gZGV2X2dldF9wYXJlbnRfcHJpdihkZXYpOworCWJ1c19kYXRhID0gZGV2
X2dldF91Y2xhc3NfcHJpdihidXMpOworCisJLyoKKwkgKiBJbiBjYXNlIHRoZSBvcGVyYXRpb24g
c3BlZWQgaXMgbm90IHlldCBlc3RhYmxpc2hlZCBieQorCSAqIGRtX3NwaV9jbGFpbV9idXMoKSBl
bnN1cmUgdGhlIGJ1cyBpcyBjb25maWd1cmVkIHByb3Blcmx5LgorCSAqLworCWlmICghYnVzX2Rh
dGEtPnNwZWVkKSB7CisJCXJldCA9IHNwaV9jbGFpbV9idXMoc2xhdmUpOworCQlpZiAocmV0KQor
CQkJZ290byBlcnI7CisJfQorCSpidXNwID0gYnVzOworCSpkZXZwID0gc2xhdmU7CisKKwlyZXR1
cm4gMDsKKworZXJyOgorCWxvZ19kZWJ1ZygiJXM6IEVycm9yIHBhdGgsIGRldmljZSAnJXMnXG4i
LCBfX2Z1bmNfXywgZGV2LT5uYW1lKTsKKworCXJldHVybiByZXQ7Cit9CisKK2ludCBfc3BpX2dl
dF9idXNfYW5kX2NzKGludCBidXNudW0sIGludCBjcywgaW50IHNwZWVkLCBpbnQgbW9kZSwKKwkJ
CWNvbnN0IGNoYXIgKmRydl9uYW1lLCBjb25zdCBjaGFyICpkZXZfbmFtZSwKKwkJCXN0cnVjdCB1
ZGV2aWNlICoqYnVzcCwgc3RydWN0IHNwaV9zbGF2ZSAqKmRldnApCiB7CiAJc3RydWN0IHVkZXZp
Y2UgKmJ1cywgKmRldjsKIAlzdHJ1Y3QgZG1fc3BpX3NsYXZlX3BsYXQgKnBsYXQ7CkBAIC00NTMs
OCArNTA5LDcgQEAgc3RydWN0IHNwaV9zbGF2ZSAqc3BpX3NldHVwX3NsYXZlKHVuc2lnbmVkIGlu
dCBidXNudW0sIHVuc2lnbmVkIGludCBjcywKIAlzdHJ1Y3QgdWRldmljZSAqZGV2OwogCWludCBy
ZXQ7CiAKLQlyZXQgPSBzcGlfZ2V0X2J1c19hbmRfY3MoYnVzbnVtLCBjcywgc3BlZWQsIG1vZGUs
IE5VTEwsIDAsICZkZXYsCi0JCQkJICZzbGF2ZSk7CisJcmV0ID0gc3BpX2dldF9idXNfYW5kX2Nz
KGJ1c251bSwgY3MsICZkZXYsICZzbGF2ZSk7CiAJaWYgKHJldCkKIAkJcmV0dXJuIE5VTEw7CiAK
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvdXNiL2dhZGdldC9tYXgzNDIwX3VkYy5jIGIvZHJpdmVycy91
c2IvZ2FkZ2V0L21heDM0MjBfdWRjLmMKaW5kZXggYTE2MDk1Zjg5Mi4uZmE2NTVjOThkYyAxMDA2
NDQKLS0tIGEvZHJpdmVycy91c2IvZ2FkZ2V0L21heDM0MjBfdWRjLmMKKysrIGIvZHJpdmVycy91
c2IvZ2FkZ2V0L21heDM0MjBfdWRjLmMKQEAgLTgzMCw4ICs4MzAsOCBAQCBzdGF0aWMgaW50IG1h
eDM0MjBfdWRjX3Byb2JlKHN0cnVjdCB1ZGV2aWNlICpkZXYpCiAJY3MgPSBzbGF2ZV9wZGF0YS0+
Y3M7CiAJc3BlZWQgPSBzbGF2ZV9wZGF0YS0+bWF4X2h6OwogCW1vZGUgPSBzbGF2ZV9wZGF0YS0+
bW9kZTsKLQlzcGlfZ2V0X2J1c19hbmRfY3MoYnVzbnVtLCBjcywgc3BlZWQsIG1vZGUsICJzcGlf
Z2VuZXJpY19kcnYiLAotCQkJICAgTlVMTCwgJnNwaWQsICZ1ZGMtPnNsYXZlKTsKKwlfc3BpX2dl
dF9idXNfYW5kX2NzKGJ1c251bSwgY3MsIHNwZWVkLCBtb2RlLCBmYWxzZSwgInNwaV9nZW5lcmlj
X2RydiIsCisJCQkgICAgTlVMTCwgJnNwaWQsICZ1ZGMtPnNsYXZlKTsKIAogCXVkYy0+ZGV2ID0g
ZGV2OwogCXVkYy0+Z2FkZ2V0LmVwMCA9ICZ1ZGMtPmVwWzBdLmVwX3VzYjsKZGlmZiAtLWdpdCBh
L2Vudi9zZi5jIGIvZW52L3NmLmMKaW5kZXggNmE0YmI3NTZmMC4uMzQ2NzA5NzM0NSAxMDA2NDQK
LS0tIGEvZW52L3NmLmMKKysrIGIvZW52L3NmLmMKQEAgLTUyLDcgKzUyLDYgQEAgc3RhdGljIGlu
dCBzZXR1cF9mbGFzaF9kZXZpY2Uoc3RydWN0IHNwaV9mbGFzaCAqKmVudl9mbGFzaCkKIAogCS8q
IHNwZWVkIGFuZCBtb2RlIHdpbGwgYmUgcmVhZCBmcm9tIERUICovCiAJcmV0ID0gc3BpX2ZsYXNo
X3Byb2JlX2J1c19jcyhDT05GSUdfRU5WX1NQSV9CVVMsIENPTkZJR19FTlZfU1BJX0NTLAotCQkJ
CSAgICAgQ09ORklHX0VOVl9TUElfTUFYX0haLCBDT05GSUdfRU5WX1NQSV9NT0RFLAogCQkJCSAg
ICAgJm5ldyk7CiAJaWYgKHJldCkgewogCQllbnZfc2V0X2RlZmF1bHQoInNwaV9mbGFzaF9wcm9i
ZV9idXNfY3MoKSBmYWlsZWQiLCAwKTsKZGlmZiAtLWdpdCBhL2luY2x1ZGUvc3BpLmggYi9pbmNs
dWRlL3NwaS5oCmluZGV4IGZhOWFiMTJkYmUuLjlhOGMxZmIyNjAgMTAwNjQ0Ci0tLSBhL2luY2x1
ZGUvc3BpLmgKKysrIGIvaW5jbHVkZS9zcGkuaApAQCAtNTcyLDYgKzU3MiwyMyBAQCBpbnQgc3Bp
X2ZpbmRfYnVzX2FuZF9jcyhpbnQgYnVzbnVtLCBpbnQgY3MsIHN0cnVjdCB1ZGV2aWNlICoqYnVz
cCwKICAqIEdpdmVuIGEgYnVzIG51bWJlciBhbmQgY2hpcCBzZWxlY3QsIHRoaXMgZmluZHMgdGhl
IGNvcnJlc3BvbmRpbmcgYnVzCiAgKiBkZXZpY2UgYW5kIHNsYXZlIGRldmljZS4KICAqCisgKiBA
YnVzbnVtOglTUEkgYnVzIG51bWJlcgorICogQGNzOgkJQ2hpcCBzZWxlY3QgdG8gbG9vayBmb3IK
KyAqIEBidXNwOglSZXR1cm5zIGJ1cyBkZXZpY2UKKyAqIEBkZXZwOglSZXR1cm4gc2xhdmUgZGV2
aWNlCisgKiBAcmV0dXJuIDAgaWYgZm91bmQsIC12ZSBvbiBlcnJvcgorICovCitpbnQgc3BpX2dl
dF9idXNfYW5kX2NzKGludCBidXNudW0sIGludCBjcywKKwkJICAgICAgIHN0cnVjdCB1ZGV2aWNl
ICoqYnVzcCwgc3RydWN0IHNwaV9zbGF2ZSAqKmRldnApOworCisvKioKKyAqIF9zcGlfZ2V0X2J1
c19hbmRfY3MoKSAtIEZpbmQgYW5kIGFjdGl2YXRlIGJ1cyBhbmQgc2xhdmUgZGV2aWNlcyBieSBu
dW1iZXIKKyAqIEFzIHNwaV9mbGFzaF9wcm9iZSgpLCBUaGlzIGlzIGFuIG9sZC1zdHlsZSBmdW5j
dGlvbi4gV2Ugc2hvdWxkIHJlbW92ZQorICogaXQgd2hlbiBhbGwgU1BJIGZsYXNoIGRyaXZlcnMg
dXNlIGRtCisgKgorICogR2l2ZW4gYSBidXMgbnVtYmVyIGFuZCBjaGlwIHNlbGVjdCwgdGhpcyBm
aW5kcyB0aGUgY29ycmVzcG9uZGluZyBidXMKKyAqIGRldmljZSBhbmQgc2xhdmUgZGV2aWNlLgor
ICoKICAqIElmIG5vIHN1Y2ggc2xhdmUgZXhpc3RzLCBhbmQgZHJ2X25hbWUgaXMgbm90IE5VTEws
IHRoZW4gYSBuZXcgc2xhdmUgZGV2aWNlCiAgKiBpcyBhdXRvbWF0aWNhbGx5IGJvdW5kIG9uIHRo
aXMgY2hpcCBzZWxlY3Qgd2l0aCByZXF1ZXN0ZWQgc3BlZWQgYW5kIG1vZGUuCiAgKgpAQCAtNTg4
LDcgKzYwNSw3IEBAIGludCBzcGlfZmluZF9idXNfYW5kX2NzKGludCBidXNudW0sIGludCBjcywg
c3RydWN0IHVkZXZpY2UgKipidXNwLAogICogQGRldnA6CVJldHVybiBzbGF2ZSBkZXZpY2UKICAq
IFJldHVybjogMCBpZiBmb3VuZCwgLXZlIG9uIGVycm9yCiAgKi8KLWludCBzcGlfZ2V0X2J1c19h
bmRfY3MoaW50IGJ1c251bSwgaW50IGNzLCBpbnQgc3BlZWQsIGludCBtb2RlLAoraW50IF9zcGlf
Z2V0X2J1c19hbmRfY3MoaW50IGJ1c251bSwgaW50IGNzLCBpbnQgc3BlZWQsIGludCBtb2RlLAog
CQkJY29uc3QgY2hhciAqZHJ2X25hbWUsIGNvbnN0IGNoYXIgKmRldl9uYW1lLAogCQkJc3RydWN0
IHVkZXZpY2UgKipidXNwLCBzdHJ1Y3Qgc3BpX3NsYXZlICoqZGV2cCk7CiAKZGlmZiAtLWdpdCBh
L2luY2x1ZGUvc3BpX2ZsYXNoLmggYi9pbmNsdWRlL3NwaV9mbGFzaC5oCmluZGV4IGQzM2QwZGQ0
NmEuLjEwZDE5ZmQ0YjEgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvc3BpX2ZsYXNoLmgKKysrIGIvaW5j
bHVkZS9zcGlfZmxhc2guaApAQCAtMTAyLDcgKzEwMiw2IEBAIGludCBzcGxfZmxhc2hfZ2V0X3N3
X3dyaXRlX3Byb3Qoc3RydWN0IHVkZXZpY2UgKmRldik7CiBpbnQgc3BpX2ZsYXNoX3N0ZF9wcm9i
ZShzdHJ1Y3QgdWRldmljZSAqZGV2KTsKIAogaW50IHNwaV9mbGFzaF9wcm9iZV9idXNfY3ModW5z
aWduZWQgaW50IGJ1c251bSwgdW5zaWduZWQgaW50IGNzLAotCQkJICAgdW5zaWduZWQgaW50IG1h
eF9oeiwgdW5zaWduZWQgaW50IHNwaV9tb2RlLAogCQkJICAgc3RydWN0IHVkZXZpY2UgKipkZXZw
KTsKIAogLyogQ29tcGF0aWJpbGl0eSBmdW5jdGlvbiAtIHRoaXMgaXMgdGhlIG9sZCBVLUJvb3Qg
QVBJICovCmRpZmYgLS1naXQgYS90ZXN0L2RtL3NwaS5jIGIvdGVzdC9kbS9zcGkuYwppbmRleCBl
ZTRhZDNhYmFhLi5jZjE0YjZjOTAwIDEwMDY0NAotLS0gYS90ZXN0L2RtL3NwaS5jCisrKyBiL3Rl
c3QvZG0vc3BpLmMKQEAgLTQ2LDggKzQ2LDcgQEAgc3RhdGljIGludCBkbV90ZXN0X3NwaV9maW5k
KHN0cnVjdCB1bml0X3Rlc3Rfc3RhdGUgKnV0cykKIAogCS8qIFRoaXMgZmluZHMgbm90aGluZyBi
ZWNhdXNlIHdlIHJlbW92ZWQgdGhlIGRldmljZSAqLwogCXV0X2Fzc2VydGVxKC1FTk9ERVYsIHNw
aV9maW5kX2J1c19hbmRfY3MoYnVzbnVtLCBjcywgJmJ1cywgJmRldikpOwotCXV0X2Fzc2VydGVx
KC1FTk9ERVYsIHNwaV9nZXRfYnVzX2FuZF9jcyhidXNudW0sIGNzLCBzcGVlZCwgbW9kZSwKLQkJ
CQkJCU5VTEwsIDAsICZidXMsICZzbGF2ZSkpOworCXV0X2Fzc2VydGVxKC1FTk9ERVYsIHNwaV9n
ZXRfYnVzX2FuZF9jcyhidXNudW0sIGNzLCAmYnVzLCAmc2xhdmUpKTsKIAogCS8qCiAJICogVGhp
cyBmb3JjZXMgdGhlIGRldmljZSB0byBiZSByZS1hZGRlZCwgYnV0IHRoZXJlIGlzIG5vIGVtdWxh
dGlvbgpAQCAtNTYsOSArNTUsOSBAQCBzdGF0aWMgaW50IGRtX3Rlc3Rfc3BpX2ZpbmQoc3RydWN0
IHVuaXRfdGVzdF9zdGF0ZSAqdXRzKQogCSAqIGEgJ3BhcnRpYWxseS1pbml0ZWQnIGRldmljZS4K
IAkgKi8KIAl1dF9hc3NlcnRlcSgtRU5PREVWLCBzcGlfZmluZF9idXNfYW5kX2NzKGJ1c251bSwg
Y3MsICZidXMsICZkZXYpKTsKLQl1dF9hc3NlcnRlcSgtRU5PRU5ULCBzcGlfZ2V0X2J1c19hbmRf
Y3MoYnVzbnVtLCBjcywgc3BlZWQsIG1vZGUsCi0JCQkJCQkiamVkZWNfc3BpX25vciIsICJuYW1l
IiwgJmJ1cywKLQkJCQkJCSZzbGF2ZSkpOworCXV0X2Fzc2VydGVxKC1FTk9FTlQsIF9zcGlfZ2V0
X2J1c19hbmRfY3MoYnVzbnVtLCBjcywgc3BlZWQsIG1vZGUsCisJCQkJCQkgImplZGVjX3NwaV9u
b3IiLCAibmFtZSIsICZidXMsCisJCQkJCQkgJnNsYXZlKSk7CiAJc2FuZGJveF9zZl91bmJpbmRf
ZW11bChzdGF0ZV9nZXRfY3VycmVudCgpLCBidXNudW0sIGNzKTsKIAl1dF9hc3NlcnRvayhzcGlf
Y3NfaW5mbyhidXMsIGNzLCAmaW5mbykpOwogCXV0X2Fzc2VydGVxX3B0cihOVUxMLCBpbmZvLmRl
dik7CkBAIC02Nyw4ICs2Niw4IEBAIHN0YXRpYyBpbnQgZG1fdGVzdF9zcGlfZmluZChzdHJ1Y3Qg
dW5pdF90ZXN0X3N0YXRlICp1dHMpCiAJdXRfYXNzZXJ0b2soc2FuZGJveF9zZl9iaW5kX2VtdWwo
c3RhdGUsIGJ1c251bSwgY3MsIGJ1cywgbm9kZSwKIAkJCQkJICJuYW1lIikpOwogCXV0X2Fzc2Vy
dG9rKHNwaV9maW5kX2J1c19hbmRfY3MoYnVzbnVtLCBjcywgJmJ1cywgJmRldikpOwotCXV0X2Fz
c2VydG9rKHNwaV9nZXRfYnVzX2FuZF9jcyhidXNudW0sIGNzLCBzcGVlZCwgbW9kZSwKLQkJCQkg
ICAgICAgImplZGVjX3NwaV9ub3IiLCAibmFtZSIsICZidXMsICZzbGF2ZSkpOworCXV0X2Fzc2Vy
dG9rKF9zcGlfZ2V0X2J1c19hbmRfY3MoYnVzbnVtLCBjcywgc3BlZWQsIG1vZGUsCisJCQkJCSJq
ZWRlY19zcGlfbm9yIiwgIm5hbWUiLCAmYnVzLCAmc2xhdmUpKTsKIAogCXV0X2Fzc2VydG9rKHNw
aV9jc19pbmZvKGJ1cywgY3MsICZpbmZvKSk7CiAJdXRfYXNzZXJ0ZXFfcHRyKGluZm8uZGV2LCBz
bGF2ZS0+ZGV2KTsKQEAgLTc2LDggKzc1LDkgQEAgc3RhdGljIGludCBkbV90ZXN0X3NwaV9maW5k
KHN0cnVjdCB1bml0X3Rlc3Rfc3RhdGUgKnV0cykKIAkvKiBXZSBzaG91bGQgYmUgYWJsZSB0byBh
ZGQgc29tZXRoaW5nIHRvIGFub3RoZXIgY2hpcCBzZWxlY3QgKi8KIAl1dF9hc3NlcnRvayhzYW5k
Ym94X3NmX2JpbmRfZW11bChzdGF0ZSwgYnVzbnVtLCBjc19iLCBidXMsIG5vZGUsCiAJCQkJCSAi
bmFtZSIpKTsKLQl1dF9hc3NlcnRlcSgtRUlOVkFMLCBzcGlfZ2V0X2J1c19hbmRfY3MoYnVzbnVt
LCBjc19iLCBzcGVlZCwgbW9kZSwKLQkJCQkgICAgICAgImplZGVjX3NwaV9ub3IiLCAibmFtZSIs
ICZidXMsICZzbGF2ZSkpOworCXV0X2Fzc2VydGVxKC1FSU5WQUwsIF9zcGlfZ2V0X2J1c19hbmRf
Y3MoYnVzbnVtLCBjc19iLCBzcGVlZCwgbW9kZSwKKwkJCQkJCSAiamVkZWNfc3BpX25vciIsICJu
YW1lIiwKKwkJCQkJCSAmYnVzLCAmc2xhdmUpKTsKIAl1dF9hc3NlcnRlcSgtRUlOVkFMLCBzcGlf
Y3NfaW5mbyhidXMsIGNzX2IsICZpbmZvKSk7CiAJdXRfYXNzZXJ0ZXFfcHRyKE5VTEwsIGluZm8u
ZGV2KTsKIApAQCAtMTQyLDE0ICsxNDIsMTMgQEAgc3RhdGljIGludCBkbV90ZXN0X3NwaV9jbGFp
bV9idXMoc3RydWN0IHVuaXRfdGVzdF9zdGF0ZSAqdXRzKQogCXN0cnVjdCB1ZGV2aWNlICpidXM7
CiAJc3RydWN0IHNwaV9zbGF2ZSAqc2xhdmVfYSwgKnNsYXZlX2I7CiAJc3RydWN0IGRtX3NwaV9z
bGF2ZV9wbGF0ICpzbGF2ZV9wbGF0OwotCWNvbnN0IGludCBidXNudW0gPSAwLCBjc19hID0gMCwg
Y3NfYiA9IDEsIG1vZGUgPSAwOworCWNvbnN0IGludCBidXNudW0gPSAwLCBjc19hID0gMCwgY3Nf
YiA9IDE7CiAKIAkvKiBHZXQgc3BpIHNsYXZlIG9uIENTMCAqLwotCXV0X2Fzc2VydG9rKHNwaV9n
ZXRfYnVzX2FuZF9jcyhidXNudW0sIGNzX2EsIDEwMDAwMDAsIG1vZGUsIE5VTEwsIDAsCi0JCQkJ
ICAgICAgICZidXMsICZzbGF2ZV9hKSk7CisJdXRfYXNzZXJ0b2soc3BpX2dldF9idXNfYW5kX2Nz
KGJ1c251bSwgY3NfYSwgJmJ1cywgJnNsYXZlX2EpKTsKKwogCS8qIEdldCBzcGkgc2xhdmUgb24g
Q1MxICovCi0JdXRfYXNzZXJ0b2soc3BpX2dldF9idXNfYW5kX2NzKGJ1c251bSwgY3NfYiwgMTAw
MDAwMCwgbW9kZSwgTlVMTCwgMCwKLQkJCQkgICAgICAgJmJ1cywgJnNsYXZlX2IpKTsKKwl1dF9h
c3NlcnRvayhzcGlfZ2V0X2J1c19hbmRfY3MoYnVzbnVtLCBjc19iLCAmYnVzLCAmc2xhdmVfYikp
OwogCiAJLyogRGlmZmVyZW50IG1heF9oeiwgZGlmZmVyZW50IG1vZGUuICovCiAJdXRfYXNzZXJ0
KHNsYXZlX2EtPm1heF9oeiAhPSBzbGF2ZV9iLT5tYXhfaHopOwpAQCAtMTc4LDEyICsxNzcsMTEg
QEAgc3RhdGljIGludCBkbV90ZXN0X3NwaV94ZmVyKHN0cnVjdCB1bml0X3Rlc3Rfc3RhdGUgKnV0
cykKIHsKIAlzdHJ1Y3Qgc3BpX3NsYXZlICpzbGF2ZTsKIAlzdHJ1Y3QgdWRldmljZSAqYnVzOwot
CWNvbnN0IGludCBidXNudW0gPSAwLCBjcyA9IDAsIG1vZGUgPSAwOworCWNvbnN0IGludCBidXNu
dW0gPSAwLCBjcyA9IDA7CiAJY29uc3QgY2hhciBkb3V0WzVdID0gezB4OWZ9OwogCXVuc2lnbmVk
IGNoYXIgZGluWzVdOwogCi0JdXRfYXNzZXJ0b2soc3BpX2dldF9idXNfYW5kX2NzKGJ1c251bSwg
Y3MsIDEwMDAwMDAsIG1vZGUsIE5VTEwsIDAsCi0JCQkJICAgICAgICZidXMsICZzbGF2ZSkpOwor
CXV0X2Fzc2VydG9rKHNwaV9nZXRfYnVzX2FuZF9jcyhidXNudW0sIGNzLCAmYnVzLCAmc2xhdmUp
KTsKIAl1dF9hc3NlcnRvayhzcGlfY2xhaW1fYnVzKHNsYXZlKSk7CiAJdXRfYXNzZXJ0b2soc3Bp
X3hmZXIoc2xhdmUsIDQwLCBkb3V0LCBkaW4sCiAJCQkgICAgIFNQSV9YRkVSX0JFR0lOIHwgU1BJ
X1hGRVJfRU5EKSk7Ci0tIAoyLjE3LjEKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fClVib290LXN0bTMyIG1haWxpbmcgbGlzdApVYm9vdC1zdG0zMkBzdC1t
ZC1tYWlsbWFuLnN0b3JtcmVwbHkuY29tCmh0dHBzOi8vc3QtbWQtbWFpbG1hbi5zdG9ybXJlcGx5
LmNvbS9tYWlsbWFuL2xpc3RpbmZvL3Vib290LXN0bTMyCg==
